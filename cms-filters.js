var e=Object.defineProperty,t=(t,i,l)=>((t,i,l)=>i in t?e(t,i,{enumerable:!0,configurable:!0,writable:!0,value:l}):t[i]=l)(t,"symbol"!=typeof i?i+"":i,l);class i{constructor(){t(this,"filterForm"),t(this,"listWrapper"),t(this,"filterFields"),t(this,"items"),t(this,"hiddenInputIntervals",{}),t(this,"clearButton"),this.filterForm=document.querySelector('[flowappz-cmsfilter-element="filters"]'),this.listWrapper=document.querySelector('[flowappz-cms-element="list"]'),this.filterFields={},this.items=[],this.clearButton=document.querySelector('[flowappz-cmsfilter-element="clear-filters"]'),this.initialize()}initialize(){this.filterForm&&this.listWrapper?(this.collectFilterFields(),this.collectItems(),this.attachEventListeners(),this.setupHiddenInputMonitoring(),this.setupClearButton()):console.error("Filter form or list wrapper not found")}collectFilterFields(){this.filterForm.querySelectorAll("[flowappz-cmsfilter-field]").forEach((e=>{const t=e.getAttribute("flowappz-cmsfilter-field")||"";this.filterFields[t]||(this.filterFields[t]={elements:[],values:new Set}),this.filterFields[t].elements.push(e)}))}collectItems(){this.items=Array.from(this.listWrapper.querySelectorAll('[role="listitem"]'))}attachEventListeners(){this.filterForm.addEventListener("input",this.handleFilterChange.bind(this)),this.filterForm.addEventListener("submit",(e=>e.preventDefault()))}setupClearButton(){this.clearButton&&this.clearButton.addEventListener("click",this.handleClearFilters.bind(this))}setupHiddenInputMonitoring(){Object.entries(this.filterFields).forEach((([e,t])=>{t.elements.forEach((t=>{this.monitorHiddenInput(t,e)}))}))}monitorHiddenInput(e,t){let i=e.value;this.hiddenInputIntervals[t]=window.setInterval((()=>{const l=e.value;if(l!==i){if(i){const i=new CustomEvent("hiddenInputChange",{detail:{fieldName:t,value:l}});e.dispatchEvent(i)}i=l}}),100),e.addEventListener("hiddenInputChange",(e=>this.handleHiddenInputChange(e)))}handleHiddenInputChange(e){const{fieldName:t,value:i}=e.detail;console.log(`Hidden input changed: ${t} = ${i}`),this.handleFilterChange()}handleFilterChange(){const e=this.getActiveFilters();this.filterItems(e)}getActiveFilters(){const e={};return Object.entries(this.filterFields).forEach((([t,i])=>{const l=i.elements.filter((e=>{if("text"===e.type||"hidden"===e.type)return""!==e.value.trim();if(e instanceof HTMLSelectElement){const t=e.options[e.selectedIndex];return t?t.value.toLowerCase():null}const t=e.closest("label.w-checkbox, label.w-radio"),i=null==t?void 0:t.querySelector("input");return("checkbox"===(null==i?void 0:i.type)||"radio"===(null==i?void 0:i.type))&&i.checked})).map((e=>{if("text"===e.type||"hidden"===e.type)return e.value.trim().toLowerCase();if(e instanceof HTMLSelectElement){const t=e.options[e.selectedIndex];return t?t.value.toLowerCase():""}return(e.textContent||"").trim().toLowerCase()}));l.length>0&&(e[t]=l)})),e}filterItems(e){this.items.forEach((t=>{const i=this.checkItemVisibility(t,e);t.style.display=i?"":"none"}))}checkItemVisibility(e,t){return 0===Object.keys(t).length||Object.entries(t).some((([t,i])=>"*"===t?this.checkGlobalSearch(e,i[0]):this.checkFieldMatch(e,t,i)))}checkGlobalSearch(e,t){const i=e.querySelectorAll("[flowappz-cmsfilter-field]");return Array.from(i).map((e=>(e.textContent||"").toLowerCase())).some((e=>e.includes(t)))}checkFieldMatch(e,t,i){const l=e.querySelectorAll(`[flowappz-cmsfilter-field="${t}"]`),n=Array.from(l).map((e=>(e.textContent||"").toLowerCase()));return i.some((e=>n.some((t=>t.includes(e)))))}handleClearFilters(){Object.values(this.filterFields).forEach((e=>{e.elements.forEach((e=>{const t=e.closest("label.w-checkbox, label.w-radio"),i=null==t?void 0:t.querySelector(".w-checkbox-input--inputType-custom, .w-form-formradioinput--inputType-custom"),l=null==t?void 0:t.querySelector("input");"checkbox"===(null==l?void 0:l.type)||"radio"===(null==l?void 0:l.type)?(null==i||i.classList.remove("w--redirected-checked"),l.checked=!1):e instanceof HTMLSelectElement?e.selectedIndex=0:e.value=""})),e.values.clear()})),this.handleFilterChange()}destroy(){Object.values(this.hiddenInputIntervals).forEach((e=>{clearInterval(e)})),Object.entries(this.filterFields).forEach((([e,t])=>{t.elements.forEach((e=>{e.removeEventListener("hiddenInputChange",(e=>this.handleHiddenInputChange(e)))}))})),this.clearButton&&this.clearButton.removeEventListener("click",this.handleClearFilters)}}document.addEventListener("DOMContentLoaded",(()=>{const e=new i;window.addEventListener("unload",(()=>{e.destroy()}))}));
